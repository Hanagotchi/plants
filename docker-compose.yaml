version: '3.9'

services:
  # simulator:
  #   build:
  #     context: ../simulator
  #   container_name: simulator
  #   env_file:
  #     - ../simulator/.env
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     sql:
  #       condition: service_healthy
  #   volumes:
  #     - ../simulator/src:/app/src

  # measurements:
  #   build:
  #     context: ../measurements
  #   container_name: measurements
  #   env_file:
  #     - ../measurements/.env
  #   depends_on:
  #     sql:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ../measurements/app:/app
  #   tty: true

  plants:
    build:
      context: .
    container_name: plants
    env_file:
      - .env
    ports:
      - ${PORT}:${PORT}
    depends_on:
      sql:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    tty: true

  sql:
    build:
      context: ./app/service/sql
      dockerfile: Dockerfile
    container_name: sql
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./app/service/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-h",
          "localhost",
          "-p",
          "5432",
          "-q",
          "-U",
          "${POSTGRES_USER}"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 50s

  # rabbitmq:
  #   build:
  #     context: ../measurements/app/service/rabbitmq
  #     dockerfile: Dockerfile
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "rabbitmq-diagnostics",
  #         "check_port_connectivity"
  #       ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10
  #     start_period: 50s